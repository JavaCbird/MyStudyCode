package com.Thread_Demo;
/*
 * 注意:1.不同线程操作统一资源时,要用相同的锁
 * 	   2.wait()与notify()方法要在synchronized方法块中
 */
public class Wait_Notify_Demo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Student s=new Student();
		SetThread st=new SetThread(s);
		GetThread gt=new GetThread(s);
		
		Thread t1=new Thread(st);
		Thread t2=new Thread(gt);
		t1.start();
		t2.start();
	}

}

class Student{
	String name;
	int age;
	boolean flag; //默认为false
}

//生产者线程
class SetThread implements Runnable{
	private Student s;
	private int x=0;
	
	public SetThread(Student s) {
		this.s = s;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (s) {
				//若有学生,则等待
				if(s.flag==true) {
					try {
						s.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				if(x%2==0) {
					s.name="林青霞";
					s.age=27;
				}else {
					s.name="周杰伦";
					s.age=25;
				}
				x++;
				
				//修改标记
				s.flag=true;
				//唤醒线程
				s.notify();
			}
		}
	}
}

//消费者线程
class GetThread implements Runnable{
	private Student s;
	
	public GetThread(Student s) {
		this.s = s;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (s) {
				//如果没有学生,则等待
				if(s.flag==false) {
					try {
						s.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				System.out.println(s.name+"---"+s.age);
				
				//修改标记
				s.flag=false;
				//唤醒线程
				s.notify();
			}
		}
	}
	
}